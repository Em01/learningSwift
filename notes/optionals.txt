* Prevents null pointer error.
* It means it could contain a nil value

var example : String = "Hi"?

* When you use ! it means you are 100% sure that the property is not nill.
print(destination!)

* optional binding lets you check a value is not nil before it gets used in any line of code

if destination != nil {}
is the equivalent of setting a constant set the value of the optional
if let userSetDestination = destination

* you do not need to force unwrap anything (no !)
* ! after variable = force unwrapping
* ? Optional binding-changes the data type to an optional string data type for example,
Every data type has a optional counterpart
* if you want to use the optional data type you have to use the ! at the end of the variable
* When you use force unwrapping you are losing the optional data type
* checking new constant equals value of optional does not equal nil then you dont have to use force unwrapping

* Optional chaining
delegate?.someMethod()
//Checks to see if the delegate contains a value and if so will execute the fn, if it does
//not contain a value then it will not run the function
